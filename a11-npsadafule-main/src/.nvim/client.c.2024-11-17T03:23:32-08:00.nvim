#include "client.h"
#include "helper.h"
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

#define BUFFER_SIZE 1024

int start_client(const char *ip, const char *port){
  int sockfd;
  struct sockaddr_in server_addr;

  sockfd = socket(AF_INET, SOCK_STREAM, 0);
  if (sockfd == -1) {
    perror("Error in socket");
    return -1;
  }

  memset(&server_addr, 0, sizeof(server_addr));
  server_addr.sin_family = AF_INET;
  server_addr.sin_port = htons(atoi(port));

  //Converting IP address to the right format
  if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <=0){
    perror("Error in inet_pton");
    close(sockfd);
    return -1;
  }

  //Connect to server
  if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1){
    perror("Error in connect");
    close(sockfd);
    return -1;
  }

  printf("Connected to server %s:%s\n", ip, port);
  return sockfd;
}

void close_client(int sockfd){
  close(sockfd);
  printf("Disconnected from server\n");
}

int main(int argc, char *argv[]){
  printf("Debug: argc = %d\n", argc);

  const char *server_ip = "127.0.0.1";  //Default IP
  const char *server_port = "8000"; //Default port

  if (argc >= 2){
    server_ip = argv[1];  //Use first arg as IP
  }

  if (argc >= 3){
    server_port = argv[2];  //Use second arg as port
  }

  printf("Connecting to server at %s:%s\n", server_ip, server_port);

  int sockfd = start_client(server_ip, server_port);
  if (sockfd == -1){
    exit(EXIT_FAILURE);
  }
  
  //Number of messages to send (testing)
  int num = 10;

  //Buffer for receiving messages
  char recv_buf[BUFFER_SIZE];

  //Sending random messages to server
  for(int i=0; i< num; i++){
    //generate random data
    uint8_t rand_buff[10];
    char hex_str[10 * 2 +1];
    if (getentropy(rand_buff, sizeof(rand_buff)) != 0){
      perror("Error in getentropy");
      break;
    }

    if (convert(rand_buff, sizeof(rand_buff), hex_str, sizeof(hex_str)) != 0){
      fprintf(stderr, "Failed to convert random bytes to hex string\n");
      break;
    }

    //Send message to server
    struct message msg;
    msg.type = MSG_TYPE_CHAT;
    msg.length = strlen(hex_str);
    strcpy(msg.content, hex_str);

    if(send_message(sockfd, &msg) == -1){
      fprint(stderr, "Failed to send message\n");
      break;
    }

    printf("Sent message %d: %s\n", i+1, hex_str);

  }

  close_client(sockfd);
  return 0;
}
















