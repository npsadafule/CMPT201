#include "server.h"
#include "helper.h"
#include <arpa/inet.h>
#include <netinet/in.h>
#include <pthread.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/epoll.h>
#include <sys/socket.h>
#include <unistd.h>

#define MAX_CLIENTS 100       // Given in instructions
#define MAX_MESSAGE_SIZE 1024 // given in instructions

typedef struct {
  int sockfd;
  struct sockaddr_in addr;
} Client;

typedef struct Message {
  uint8_t data[MAX_MESSAGE_SIZE];
  size_t length;
  struct Message *next;
}Message;

Client clients[MAX_CLIENTS];
int client_count = 0;
pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER;
int expected_clients = 0;
int termination_count = 0;

Message *message_queue_head = NULL;
Message *message_queue_tail = NULL;
pthread_mutex_t queue_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t queue_cond = PTHREAD_COND_INITIALIZER;

int start_server(const char *port_str, int expected_clients_param)

void cleanup_server(int listen_socket) {
  close(listen_socket);
  printf("Server shut down");
}

int main(int argc, char *argv[]) {
  if (argc != 3) {
    fprintf(stderr, "Format: ./server <port number> <# of clients>\n");
    exit(EXIT_FAILURE);
  }

  const char *port = argv[1];
  int clients_expected = atoi(argv[2]);

  int listen_socket = start_server(port, clients_expected);
  if (listen_socket == -1) {
    exit(EXIT_FAILURE);
  }

  cleanup_server(listen_socket);
  return 0;
}
