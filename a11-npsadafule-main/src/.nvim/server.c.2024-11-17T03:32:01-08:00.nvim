#include "server.h"
#include "helper.h"
#include <arpa/inet.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/epoll.h>
#include <sys/socket.h>
#include <unistd.h>

#define BUFFER_SIZE 1024

int start_server(const char *port) {
  int listen_socket;
  struct sockaddr_in server_address;
  int opt = 1;

  listen_socket = socket(AF_INET, SOCK_STREAM, 0);
  if (listen_socket == -1) {
    perror("Error in socket");
    return -1;
  }

  // Set socket options to reuse address and port
  if (setsockopt(listen_socket, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt,
                 sizeof(opt))) {
    perror("Error in setsocketopt");
    close(listen_socket);
    return -1;
  }

  memset(&server_address, 0, sizeof(server_address));
  server_address.sin_family = AF_INET;
  server_address.sin_addr.s_addr = INADDR_ANY; // Binding to all interface
  server_address.sin_port = htons(atoi(port));

  if (bind(listen_socket, (struct sockaddr *)&server_address,
           sizeof(server_address)) == -1) {
    perror("Error in bind");
    close(listen_socket);
    return -1;
  }

  if (listen(listen_socket, MAX_CLIENTS) == -1) {
    perror("Error in listen");
    close(listen_socket);
    return -1;
  }

  printf("Server listening on port %s\n", port);

  return listen_socket;
}

int handle_clients(int listen_socket) {
  int epollfd;
  struct epoll_event ev, events[MAX_EVENTS];
  int nfds;

  // Creting epoll instance
  epoll = epoll_create1(0);
  if (epollfd == -1) {
    perror("Error in epoll_create1");
    return -1;
  }

  // Add the listening socket to epoll
  ev.events = EPOLLIN;
  ev.data.fd = listen_socket;
  if (epoll_ctl(epoll, EPOLL_CTL_ADD, listen_socket, &ev) == -1) {
    perror("error in epoll_ctl: listen_socket");
    close(epollfd);
    return -1;
  }

  // Buffer for incoming messages
  char buff[BUFFER_SIZE];

  while (1) {
    nfds = epoll_wait(epollfd, event, MAX_EVENTS, -1);
    if (nfds == -1) {
      perror("error in epoll_wait");
      close(epollfd);
      return -1;
    }

    for (int i = 0; i < nfds; ++i) {
      if (events[i].data.fd == listen_socket) {
        // Accept new connection
        int conn_sock;
        struct sockaddr_in client_addr;
        socklen_t addrlen = sizeof(client_addr);
        conn_sock =
            accept(listen_socket, (struct sockaddr *)&client_addr, &addrlen);
        if (conn_sock == -1) {
          perror("error in accept");
          continue;
        }

        // Setting non blocking
        int flags = fcntl(conn_sock, F_GETFL, 0);
        if (flags == -1) {
          flags = 0;
        }
        fcntl(conn_sock, F_SETFL, flags | O_NONBLOCK);

        // Adding new socket to epoll
        ev.events = EPOLLIN | EPOLLET;
        ev.data.fd = conn_sock;
        if (epoll_ctl(epollfd, EPOLL_CTL_ADD, conn_sock, &ev) == -1) {
          perror("error in epoll_ctl: conn_sock");
          close(conn_sock);
          continue;
        }

        printf("Accept connection from %s:%d\n",
               inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
      } else {
        // Handle client data
        int client_fd = events[i].data.fd;
        ssize_t count = read(client_fd, buff, sizeof(buff));
        if (count == -1) {
          if (errno != EAGAIN) {
            perror("error in read");
            close(client_fd);
          }
        } else if (count == 0) {
          // Connection closed
          printf("Client disconnected\n");
          close(client_fd);
        } else {
          // Processing data
          buff[count] = '\0';
          printf("Received: %s\n", buff);
          // Echo back to client
          write(client_fd, buff, count);
        }
      }
    }
  }

  close(epollfd);
  return 0;
}

void cleanup_server(int listen_socket) {
  close(listen_socket);
  printf("Server shutdown\n");
}

int main(int argc, char *argv[]) {
  if (argc != 2) {
    fprintf(stderr, "Usage: ./server <port>\n");
    exit(EXIT_FAILURE);
  }

  int listen_socket = start_server(argv[1]);
  if (listen_socket == -1) {
    exit(EXIT_FAILURE);
  }

  if (handle_clients(listen_socket) == -1) {
    cleanup_server(listen_socket);
    exit(EXIT_FAILURE);
  }

  cleanup_server(listen_socket);
  return 0;
}
